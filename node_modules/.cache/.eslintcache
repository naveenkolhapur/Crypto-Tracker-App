[{"D:\\Projects\\React-Projects\\crypto-nerds\\src\\index.js":"1","D:\\Projects\\React-Projects\\crypto-nerds\\src\\App.js":"2","D:\\Projects\\React-Projects\\crypto-nerds\\src\\Pages\\HomePage.js":"3","D:\\Projects\\React-Projects\\crypto-nerds\\src\\Pages\\CoinPage.js":"4","D:\\Projects\\React-Projects\\crypto-nerds\\src\\Components\\Header.js":"5","D:\\Projects\\React-Projects\\crypto-nerds\\src\\CryptoContext.js":"6","D:\\Projects\\React-Projects\\crypto-nerds\\src\\Components\\Banner\\Banner.js":"7","D:\\Projects\\React-Projects\\crypto-nerds\\src\\Components\\Banner\\Carousel.js":"8","D:\\Projects\\React-Projects\\crypto-nerds\\src\\config\\api.js":"9","D:\\Projects\\React-Projects\\crypto-nerds\\src\\Components\\CoinsTable.js":"10","D:\\Projects\\React-Projects\\crypto-nerds\\src\\Components\\CoinInfo.js":"11","D:\\Projects\\React-Projects\\crypto-nerds\\src\\config\\data.js":"12","D:\\Projects\\React-Projects\\crypto-nerds\\src\\Components\\SelectButton.js":"13"},{"size":392,"mtime":1663001625900,"results":"14","hashOfConfig":"15"},{"size":591,"mtime":1663688885610,"results":"16","hashOfConfig":"15"},{"size":264,"mtime":1663142693498,"results":"17","hashOfConfig":"15"},{"size":2876,"mtime":1663609707643,"results":"18","hashOfConfig":"15"},{"size":1296,"mtime":1662996666991,"results":"19","hashOfConfig":"15"},{"size":730,"mtime":1662917053147,"results":"20","hashOfConfig":"15"},{"size":993,"mtime":1662997200370,"results":"21","hashOfConfig":"15"},{"size":2364,"mtime":1663005849644,"results":"22","hashOfConfig":"15"},{"size":628,"mtime":1663339146952,"results":"23","hashOfConfig":"15"},{"size":6500,"mtime":1663173530291,"results":"24","hashOfConfig":"15"},{"size":3024,"mtime":1663347377206,"results":"25","hashOfConfig":"15"},{"size":271,"mtime":1663345823165,"results":"26","hashOfConfig":"15"},{"size":362,"mtime":1663348216892,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","suppressedMessages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},"hrghyo",{"filePath":"32","messages":"33","suppressedMessages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"35","messages":"36","suppressedMessages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},{"filePath":"38","messages":"39","suppressedMessages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"31"},{"filePath":"42","messages":"43","suppressedMessages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},{"filePath":"45","messages":"46","suppressedMessages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48","usedDeprecatedRules":"31"},{"filePath":"49","messages":"50","suppressedMessages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},{"filePath":"52","messages":"53","suppressedMessages":"54","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"31"},{"filePath":"56","messages":"57","suppressedMessages":"58","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},{"filePath":"59","messages":"60","suppressedMessages":"61","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"31"},{"filePath":"63","messages":"64","suppressedMessages":"65","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66","usedDeprecatedRules":"31"},{"filePath":"67","messages":"68","suppressedMessages":"69","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},{"filePath":"70","messages":"71","suppressedMessages":"72","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},"D:\\Projects\\React-Projects\\crypto-nerds\\src\\index.js",[],[],[],"D:\\Projects\\React-Projects\\crypto-nerds\\src\\App.js",[],[],"D:\\Projects\\React-Projects\\crypto-nerds\\src\\Pages\\HomePage.js",[],[],"D:\\Projects\\React-Projects\\crypto-nerds\\src\\Pages\\CoinPage.js",["73"],[],"import React from 'react'\r\nimport { useState } from 'react';\r\nimport { useParams } from 'react-router-dom'\r\nimport { CryptoState } from '../CryptoContext';\r\nimport axios from 'axios'\r\nimport { SingleCoin } from '../config/api';\r\nimport { useEffect } from 'react';\r\nimport CoinInfo from '../Components/CoinInfo';\r\nimport \"./coinspage.css\"\r\nimport { LinearProgress, Typography } from '@material-ui/core';\r\nimport { numberWithcomma } from '../Components/Banner/Carousel';\r\nimport ReactHTMLParser from 'html-react-parser'\r\n\r\n\r\n\r\nconst CoinPage = () => {\r\n  const {id} = useParams();\r\n  const [coin, setCoin] = useState();\r\n\r\n  const {currency, symbol} = CryptoState();\r\n\r\n  const fetchcoin = async() => {\r\n    const {data} = await axios.get(SingleCoin(id));\r\n    setCoin(data);\r\n  }\r\n\r\n  useEffect(() => {\r\n    fetchcoin();\r\n  },[])\r\n\r\n  if (!coin) return <LinearProgress style={{backgroundColor:'#486DFB'}}/>\r\n \r\n  return (\r\n    <div className=\"container\">\r\n      <div className=\"sidebar\"> \r\n        <img\r\n          src={coin?.image.large}\r\n          alt={coin?.name}\r\n          height=\"200\"\r\n          style={{marginTop:20}}\r\n        />\r\n        <Typography variant='h3' className='heading'>\r\n          {coin?.name}\r\n        </Typography>\r\n        <Typography variant='subtitle1' className='description'>\r\n           {ReactHTMLParser(coin?.description.en.split(\". \")[0])}\r\n        </Typography>\r\n        <div className='marketdata'>\r\n          <span style={{display:\"flex\"}}>\r\n            <Typography\r\n            variant='h5'\r\n            className='heading'\r\n            >Rank :</Typography>\r\n            &nbsp; &nbsp;\r\n            <Typography\r\n            variant='h6'\r\n            style={{fontWeight:\"lighter\"}}\r\n            >\r\n            {coin?.market_cap_rank}\r\n            </Typography>\r\n          </span>\r\n\r\n          <span style={{display:\"flex\"}}>\r\n            <Typography\r\n            variant='h5'\r\n            className='heading'\r\n            >Current Price :</Typography>\r\n            &nbsp; &nbsp;\r\n            <Typography\r\n            variant='h6'\r\n            style={{fontWeight:\"lighter\"}}\r\n            >\r\n             {symbol}\r\n             {numberWithcomma(coin?.market_data.current_price[currency.toLowerCase()])}\r\n            </Typography>\r\n          </span>\r\n\r\n          <span style={{display:\"flex\"}}>\r\n            <Typography\r\n            variant='h5'\r\n            className='heading'\r\n            >Market Cap :</Typography>\r\n            &nbsp; &nbsp;\r\n            <Typography\r\n            variant='h6'\r\n            style={{ fontWeight:\"lighter\"}}\r\n            >\r\n             {symbol}\r\n             {numberWithcomma(coin?.market_data.market_cap[currency.toLowerCase()].toString().slice(0, -6))}M\r\n            </Typography>\r\n          </span>\r\n        </div>\r\n      </div>\r\n      <CoinInfo coin={coin}/>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CoinPage\r\n","D:\\Projects\\React-Projects\\crypto-nerds\\src\\Components\\Header.js",[],[],"D:\\Projects\\React-Projects\\crypto-nerds\\src\\CryptoContext.js",["74"],[],"import React, { children } from 'react'\r\nimport { useEffect } from 'react';\r\nimport { useState } from 'react';\r\nimport { useContext } from 'react';\r\nimport { createContext } from 'react';\r\n\r\nconst Crypto = createContext();\r\n\r\nconst CryptoContext = ({children}) => {\r\n\r\n  const [currency, setCurrency] = useState(\"INR\");\r\n  const [symbol, SetSymbol] = useState(\"₹\");\r\n\r\n  useEffect(() => {\r\n    if (currency===\"INR\") SetSymbol(\"₹\");\r\n    else if(currency === \"USD\") SetSymbol(\"$\");\r\n  },[currency])\r\n\r\n  return (\r\n    <Crypto.Provider value={{currency, symbol, setCurrency}}>\r\n    {children}\r\n    </Crypto.Provider>\r\n  )\r\n}\r\n\r\nexport default CryptoContext;\r\n\r\nexport const CryptoState = () => {\r\n  return useContext(Crypto);\r\n}","D:\\Projects\\React-Projects\\crypto-nerds\\src\\Components\\Banner\\Banner.js",[],[],"D:\\Projects\\React-Projects\\crypto-nerds\\src\\Components\\Banner\\Carousel.js",["75"],[],"import React from 'react'\r\nimport axios from 'axios'\r\nimport { TrendingCoins } from '../../config/api';\r\nimport { useState } from 'react';\r\nimport { useEffect } from 'react';\r\nimport { CryptoState } from '../../CryptoContext';\r\nimport \"./Carousel.css\";\r\nimport AliceCarousel from 'react-alice-carousel';\r\nimport { Link } from 'react-router-dom';\r\n\r\nexport function numberWithcomma(x){\r\n return x.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g,\",\");\r\n}\r\n\r\nconst Carousel = () => {\r\n   const [ trending , setTrendingCoins] = useState([]);\r\n\r\n    const {currency, symbol} = CryptoState();\r\n\r\n    const fetchTrendingCoins = async () => {\r\n        const { data } = await axios.get(TrendingCoins(currency));\r\n        setTrendingCoins(data);\r\n    }\r\n\r\n    console.log(trending);\r\n\r\n    useEffect(() => {\r\n        fetchTrendingCoins();\r\n    }, [currency]);\r\n\r\n    const items = trending.map((coin) => {\r\n        let profit = coin.price_change_percentage_24h >= 0;\r\n            return(\r\n            <Link to={`/coins/${coin.id}`} className=\"carousel-item\">\r\n                <img \r\n                    src={coin.image}\r\n                    alt={coin.name}\r\n                    height=\"80\"\r\n                    style={{marginBottom:10}}\r\n                />\r\n                <span>\r\n                    {coin.symbol} &nbsp;\r\n                    <span style={{\r\n                        color: profit > 0 ? \"rgb(14, 203, 129)\" : \"red\",\r\n                        fontWeight:\"bolder\"\r\n                    }}> {profit && \"+\"}{coin.price_change_percentage_24h.toFixed(2)}% </span>\r\n                </span>\r\n                <span className='price-style'>\r\n                    {symbol}{numberWithcomma(coin.current_price.toFixed(2))}\r\n                </span>\r\n                \r\n            </Link>\r\n            )\r\n        })\r\n\r\n    const responsive ={\r\n        0:{\r\n            items:2\r\n        },\r\n        512:{\r\n            items:4\r\n        }\r\n    }\r\n\r\n  return (\r\n    <>\r\n    <div className = \"carousel\">\r\n        <AliceCarousel\r\n            mouseTracking\r\n            infinite\r\n            autoPlay\r\n            autoPlayInterval={1000}\r\n            animationDuration={1500}\r\n            disableButtonsControls\r\n            disableDotsControls\r\n            responsive={responsive}\r\n            items={items}     \r\n        />\r\n    </div>\r\n    </>\r\n    \r\n  )\r\n}\r\n\r\nexport default Carousel","D:\\Projects\\React-Projects\\crypto-nerds\\src\\config\\api.js",[],[],"D:\\Projects\\React-Projects\\crypto-nerds\\src\\Components\\CoinsTable.js",["76"],[],"import { Container, ThemeProvider, Typography, createTheme, TextField, TableContainer, LinearProgress, TableHead, Table, TableRow, TableCell, TableBody} from '@material-ui/core';\r\nimport axios from 'axios';\r\nimport React, { useEffect, useState } from 'react'\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { CoinList } from '../config/api';\r\nimport { CryptoState } from '../CryptoContext';\r\nimport './CoinsTable.css'\r\nimport { numberWithcomma } from './Banner/Carousel';\r\nimport { Pagination } from '@material-ui/lab';\r\n\r\nconst CoinsTable = () => {\r\n    const [coins, setCoins] = useState([]);\r\n    const [loading, setLoading] = useState(false);\r\n    const [search, setSearch] = useState(\" \");\r\n    const [page, setPage] = useState(1);\r\n    const navigate = useNavigate();\r\n\r\n    const {currency, symbol} = CryptoState();\r\n\r\n    const fetchCoins = async () =>  {\r\n        setLoading(true);\r\n        const {data} = await axios.get(CoinList(currency));\r\n        setCoins(data)\r\n        setLoading(false);\r\n    };\r\n\r\n    useEffect(() => {\r\n        fetchCoins();\r\n    }, [currency]);\r\n\r\n    const darkTheme = createTheme({\r\n        palette:{\r\n          primary:{\r\n            main:'#fff'\r\n          },\r\n          type:'dark',\r\n        }\r\n      });\r\n\r\n      const handleSearch = () => {\r\n        return coins.filter((coin) => \r\n            coin.name.toLowerCase().includes(search) ||\r\n            coin.symbol.toLowerCase().includes(search)\r\n        );\r\n      };\r\n\r\n  return (\r\n    <>\r\n    <ThemeProvider theme={darkTheme}>\r\n        <Container className='coinstable-container'>\r\n            <Typography className='coinstable-heading' variant='h4'>\r\n            Cryptocurrency Prices by Market Cap\r\n            </Typography>\r\n            <TextField\r\n            variant='outlined'\r\n            label=\"Search Coins...\"\r\n            className='searchbox'\r\n            onChange={(e) =>setSearch(e.target.value)}\r\n            />\r\n            <TableContainer>\r\n                {\r\n                    loading ? (<LinearProgress className='linear-progress'/>) : (\r\n                        <Table>\r\n                            <TableHead className='table-head'>\r\n                                <TableRow>\r\n                                    {\r\n                                        [\"Coin\", \"Price\", \"24Change\", \"Market Cap\"].map((head) => (\r\n                                           <TableCell\r\n                                                key={head}\r\n                                                className=\"table-cell\"\r\n                                                align={head === \"Coin\" ? \"\" : \"right\"}>\r\n                                                {head}\r\n                                           </TableCell> \r\n                                        ))\r\n                                    }\r\n                                </TableRow>\r\n                            </TableHead>\r\n                            <TableBody>\r\n                                \r\n                                    {handleSearch().slice((page-1)*10, (page -1)*10 + 10).map((row) => {\r\n                                        const profit =row.price_change_percentage_24h > 0;\r\n                                        return(\r\n                                        <TableRow\r\n                                            key={row.name}\r\n                                            className=\"inner-row\"\r\n                                            onClick={() => navigate(`/coins/${row.id}`)}>  \r\n                                            <TableCell component=\"th\" scope='row' className='table-cell-1'>\r\n                                                <img\r\n                                                src={row.image}\r\n                                                alt={row.name}\r\n                                                height=\"50\"\r\n                                                style={{marginBottom : 10}}\r\n                                                />\r\n                                                <div className=\"crypto-names\">\r\n                                                    <span style={{textTransform:\"uppercase\" , fontSize:22, paddingLeft:10}}>{row.symbol}</span>\r\n                                                    <span style={{color:\"darkgrey\", paddingLeft:10}}>{row.name}</span>\r\n                                                </div>\r\n                                            </TableCell>\r\n                                            <TableCell align='right'>\r\n                                                {symbol}\r\n                                                {numberWithcomma(row.current_price.toFixed(2))}\r\n                                            </TableCell>\r\n                                            <TableCell align='right' style={{\r\n                                                color: profit > 0 ? \"rgb(14, 203, 129)\" : \"red\" ,\r\n                                                fontWeight:500\r\n                                            }}>\r\n                                                {profit && \"+\"}\r\n                                                {row.price_change_percentage_24h.toFixed(2)}%\r\n                                            </TableCell>\r\n                                            <TableCell align='right'>\r\n                                                {symbol}\r\n                                                {numberWithcomma(row.market_cap.toString().slice(0, -6))}M\r\n                                            </TableCell>\r\n                                        </TableRow>\r\n                                     \r\n                                        )\r\n                                    })}\r\n                                \r\n                            </TableBody>\r\n                        </Table>\r\n                    )\r\n                }\r\n            </TableContainer>\r\n            <Pagination\r\n                style={{\r\n                    padding:20,\r\n                    display:\"flex\",\r\n                    flexDirection:\"row\",\r\n                    width:\"100%\",\r\n                    justifyContent:\"center\"\r\n                }}\r\n                className=\"pagination\"\r\n                count={(handleSearch()?.length/10).toFixed(0)}\r\n                onChange={(_, value) => {\r\n                    setPage(value);\r\n                    window.scroll(0, 450);\r\n                }}\r\n            />\r\n        </Container>\r\n    </ThemeProvider>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default CoinsTable\r\n","D:\\Projects\\React-Projects\\crypto-nerds\\src\\Components\\CoinInfo.js",["77","78"],[],"import { CircularProgress, createTheme, ThemeProvider } from '@material-ui/core';\r\nimport axios from 'axios';\r\nimport React from 'react'\r\nimport { useEffect } from 'react';\r\nimport { useState } from 'react'\r\nimport { Line } from 'react-chartjs-2';\r\nimport { HistoricalChart } from '../config/api';\r\nimport { CryptoState } from '../CryptoContext';\r\nimport \"./CoinInfo.css\"\r\nimport {\r\n  Chart as ChartJS,\r\n  CategoryScale,\r\n  LinearScale,\r\n  PointElement,\r\n  LineElement,\r\n  Title,\r\n  Tooltip,\r\n  Legend,} from 'chart.js'\r\nimport { Chart } from 'react-chartjs-2'\r\nimport { chartDays } from '../config/data';\r\nimport SelectButton from './SelectButton';\r\nChartJS.register(\r\n  CategoryScale,\r\n  LinearScale,\r\n  PointElement,\r\n  LineElement,\r\n  Title,\r\n  Tooltip,\r\n  Legend)\r\n\r\nconst CoinInfo = ({coin}) => { \r\n  const [historicalData, setHistoricalData] = useState();\r\n  const [days, setDays] = useState(1);\r\n\r\n  const {currency} = CryptoState();\r\n\r\n  const fetchHistoricalData = async () => {\r\n    const {data} = await axios.get(HistoricalChart(coin.id, days, currency));\r\n    setHistoricalData(data.prices);\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchHistoricalData();\r\n  },[currency, days])\r\n    \r\n  const darkTheme = createTheme({\r\n    palette: {\r\n      primary:{\r\n        main: \"#fff\",\r\n      },\r\n      type: \"dark\",\r\n    },\r\n  });\r\n\r\n  return (\r\n    <ThemeProvider theme={darkTheme}>\r\n    <div className='chart-container'>\r\n      {\r\n        !historicalData ? (\r\n          <CircularProgress\r\n            style={{color: \"#486DFB\"}}\r\n            size={250}\r\n            thickness={1}\r\n          />\r\n        ):(\r\n          <>\r\n            <Line \r\n              data={{\r\n                labels: historicalData.map((coin) => {\r\n                  let date = new Date(coin[0]);\r\n                  let time = date.getHours() > 12\r\n                  ? `${date.getHours() - 12}:${date.getMinutes()}PM`\r\n                  : `${date.getHours()}:${date.getMinutes()}AM`;\r\n\r\n                  return days===1 ? time : date.toLocaleDateString();               \r\n                  }),\r\n                  datasets : [\r\n                    {\r\n                      data: historicalData.map((coin) => coin[1]),\r\n                     label: `Price (last ${days} Days) in ${currency}`,\r\n                     borderColor:\"#486DFB\",                   \r\n                    },\r\n                  ],\r\n              }}\r\n              options={{\r\n                elements: {\r\n                  point: {\r\n                    radius: 1,\r\n                  },\r\n                },\r\n              }}\r\n            />\r\n            <div className='chart-buttons'>\r\n              {chartDays.map((day) => (\r\n                  <SelectButton\r\n                  key={day.value}\r\n                  onClick={() => setDays(day.value)}\r\n                  selected={day.value===days}\r\n                  >{day.label}</SelectButton>\r\n              ))}\r\n            </div>\r\n          </>\r\n        )\r\n      }\r\n    </div>\r\n    </ThemeProvider>\r\n  )\r\n}\r\n\r\nexport default CoinInfo","D:\\Projects\\React-Projects\\crypto-nerds\\src\\config\\data.js",[],[],"D:\\Projects\\React-Projects\\crypto-nerds\\src\\Components\\SelectButton.js",[],[],{"ruleId":"79","severity":1,"message":"80","line":29,"column":5,"nodeType":"81","endLine":29,"endColumn":7,"suggestions":"82"},{"ruleId":"83","severity":1,"message":"84","line":1,"column":17,"nodeType":"85","messageId":"86","endLine":1,"endColumn":25},{"ruleId":"79","severity":1,"message":"87","line":29,"column":8,"nodeType":"81","endLine":29,"endColumn":18,"suggestions":"88"},{"ruleId":"79","severity":1,"message":"89","line":29,"column":8,"nodeType":"81","endLine":29,"endColumn":18,"suggestions":"90"},{"ruleId":"83","severity":1,"message":"91","line":19,"column":10,"nodeType":"85","messageId":"86","endLine":19,"endColumn":15},{"ruleId":"79","severity":1,"message":"92","line":44,"column":5,"nodeType":"81","endLine":44,"endColumn":21,"suggestions":"93"},"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'fetchcoin'. Either include it or remove the dependency array.","ArrayExpression",["94"],"no-unused-vars","'children' is defined but never used.","Identifier","unusedVar","React Hook useEffect has a missing dependency: 'fetchTrendingCoins'. Either include it or remove the dependency array.",["95"],"React Hook useEffect has a missing dependency: 'fetchCoins'. Either include it or remove the dependency array.",["96"],"'Chart' is defined but never used.","React Hook useEffect has a missing dependency: 'fetchHistoricalData'. Either include it or remove the dependency array.",["97"],{"desc":"98","fix":"99"},{"desc":"100","fix":"101"},{"desc":"102","fix":"103"},{"desc":"104","fix":"105"},"Update the dependencies array to be: [fetchcoin]",{"range":"106","text":"107"},"Update the dependencies array to be: [currency, fetchTrendingCoins]",{"range":"108","text":"109"},"Update the dependencies array to be: [currency, fetchCoins]",{"range":"110","text":"111"},"Update the dependencies array to be: [currency, days, fetchHistoricalData]",{"range":"112","text":"113"},[825,827],"[fetchcoin]",[832,842],"[currency, fetchTrendingCoins]",[1077,1087],"[currency, fetchCoins]",[1167,1183],"[currency, days, fetchHistoricalData]"]